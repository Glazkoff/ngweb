"use strict";
require('dotenv').config()

const fs = require('fs');

const express = require('express');
const nodemailer = require("nodemailer");

if (process.env.TELEGRAM_ENABLE !== 'false') {
  const TelegramBot = require('node-telegram-bot-api');
  const token = '1848742663:AAGCcisKnawCeMSIRSJLtmDNWVzF92BlZpI';

  const bot = new TelegramBot(token, {polling: true});
  let fileContent = fs.readFileSync("tg_chats.txt", "utf8");
  let users = fileContent.split(/\r?\n/);
  bot.on("polling_error", console.log);

  bot.onText(/\/start/, (msg, match) => {
    const chatId = msg.chat.id
    bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç! –Ø <b>—á–∞—Ç-–±–æ—Ç –¥–ª—è —Å–ª—É–∂–µ–±–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n–¢–µ–±–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å <code>/register</code>, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –º–µ–Ω—è`,{parse_mode : "HTML"})
  })

  bot.onText(/\/register/, (msg, match) => {
    const chatId = msg.chat.id
    let findUserIndex = users.findIndex(userId => {
      return userId ==chatId 
    })
    if (findUserIndex == -1) {
      users.push(chatId)
      fs.appendFile('tg_chats.txt', chatId + "\n", function (err) {
        if (err) throw err;
        console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!');
      });
      bot.sendMessage(chatId, `<b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞—Å—Å—ã–ª–∫—É</b> ‚úî\n–ß–∞—Ç #${chatId}`,{parse_mode : "HTML"})
    } else {
      bot.sendMessage(chatId, `–ü—Ä–µ–∫—Ä–∞—Ç–∏! –¢—ã —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω, —á—Ç–æ –µ—â—ë –Ω—É–∂–Ω–æ?`)
    }
  })

  bot.onText(/\/employees/, async (msg, match) => {
    const chatId = msg.chat.id
    let message = '<b>–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n'
  let findUserIndex = users.findIndex(userId => {
      return userId ==chatId 
    })
    if (findUserIndex !== -1) {
      for (let index = 0; index < users.length; index++) {
        const userId = users[index];
        if (userId != "") {
          let chatData = await bot.getChat(userId)
          message += chatData.first_name + " " + chatData.last_name + " / " + chatData.username + " (–°hat ID: " + userId + ")" + "\n"
        }
      }
      bot.sendMessage(chatId, message, { parse_mode: "HTML" });
    } else {
      bot.sendMessage(chatId, "<b>–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!</b>", { parse_mode: "HTML" });
    }
  })
}

const app = express();
const port = 3000;

app.use(express.urlencoded({ extended: true }))

let transporter = nodemailer.createTransport({
    service: "Yandex",
    auth: {
      user: "requests@nglazkov.ru", 
      pass: "nglazkov2021"
  },
  secure: true,
  //  dkim: {
  //   domainName: "nglazkov.ru",
  //   keySelector: "mail._domainkey",
  //   privateKey: "-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBg..."
  // }
    
  });

function formatDate(date) {

  var dd = date.getDate();
  if (dd < 10) dd = '0' + dd;

  var mm = date.getMonth() + 1;
  if (mm < 10) mm = '0' + mm;

  var yy = date.getFullYear()

  return dd + '.' + mm + '.' + yy;
}

app.post('/api/request', async (req, res) => {
  console.log("BODY: ", req.body);

  let now = new Date();
  let name = req.body.name || '-'  
  let phone = req.body.phone || '-' 
  let email = req.body.email || '-'

  let htmlBody = `<div><h1>–ó–ê–Ø–í–ö–ê</h1></div><div><b>–ò–º—è: ${name}</b><br><b>–¢–µ–ª–µ—Ñ–æ–Ω: ${phone}</b><br><b>Email: ${email}</b><br></div>`

  try {
    if (process.env.TELEGRAM_ENABLE !== 'false') {
      for (let index = 0; index < users.length; index++) {
        const userChatId = users[index];
        if (userChatId != "") {
          await bot.sendMessage(userChatId, `<b>–ó–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ nglazkov.ru –æ—Ç ${formatDate(now)}</b>\n\n–ò–º—è: <b>${name}</b>\n–¢–µ–ª–µ—Ñ–æ–Ω: <b>${phone}</b>\nEmail: <b>${email}</b>`, { parse_mode: "HTML" })
        }
      }
    }
    try {
      let info = await transporter.sendMail({
        from: '"–ó–∞—è–≤–∫–∏ —Å —Å–∞–π—Ç–∞ nglazkov.ru üò∏" <requests@nglazkov.ru>', // –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
          to: "zitrnik@gmail.com, d.belyaeva1@gmail.com, nvkolezneva@gmail.com", // —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π,
        // to: "zitrnik@gmail.com", // —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π,
        subject: `–ó–∞—è–≤–∫–∞ –Ω–∞ nglazkov.ru –æ—Ç ${formatDate(now)}`, // –¢–µ–º–∞ –ø–∏—Å—å–º–∞
        text: "–ü—Ä–∏–≤–µ—Ç", // –¢–µ–ª–æ –ø–∏—Å—å–º–∞ –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        html: htmlBody // –¢–µ–ª–æ –ø–∏—Å—å–º–∞ HTML
      });
        console.log(info);  
    } catch (error) {
      console.log(error);
    }
    res.send({ message: "All is ok!" });
  } catch (error) {
    res.send({ error });
  }
});

app.get('*', (req, res) => {
  res.send({ message: '–ü—Ä–∏–≤–µ—Ç! –¢—ã –Ω–∞—à—ë–ª –Ω–∞—à–µ API. –ï—Å–ª–∏ —Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ, –ø–æ–¥–∞–π –∑–∞—è–≤–∫—É –Ω–∞ —Ä–∞–±–æ—Ç—É –≤–º–µ—Å—Ç–µ —Å —Ä–µ–∑—é–º–µ –Ω–∞ –ø–æ—á—Ç—É contact@nglazkov.ru'})
})



app.listen(port, () => console.log(`–ó–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:${port}`));
